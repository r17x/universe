@document.meta
title: Neorg help-page
description: The Neorg vim help-page
author: The Neorg Community
categories: docs
created: 2021-09-05
version: 0.1
@end

.toc

* The `.norg` File Format

  If you find the {https://github.com/nvim-neorg/norg-specs/blob/main/1.0-specification.norg}[spec]
  too long and want to jump-start your Neorg skills, you've come to the right place!

  NOTE: If you have `core.concealer` enabled, then be sure to run `:Neorg toggle-concealer`
  any time you want to see the raw markup.

  This document automatically disables the hiding of characters for clarity.
  If you would like to reenable this, run `:set conceallevel=2`.

** Basic Markup

   Here is how you can do very basic markup. First you see it raw, then rendered:
   - *bold*
   - /italic/
   - _underline_
   - -strikethrough-
   - !spoiler!
   - `inline code`
   - ^superscript^  (when nested into `subscript`, will highlight as an error)
   - ,subscript,    (when nested into `superscript`, will highlight as an error)
   - $f(x) = y$     (see also {# Math})
   - &variable&     (see also {# Variables})
   - %inline comment%

   This also immediately shows you how to escape a special character using the backslash, \\.

   Adding the [pipe]{:cheatsheet:*** Styling with a Pipe} modifier inside any markup
   characters allows you to include white space before and after the markup characters, as well as
   ignore escape characters inside.
   Example: *|   look ma, white space!   |*

** Nesting

   Neorg generally does *NOT* care about indentation! ðŸŽ‰
   Thus, nesting is done via repeating modifiers like you are used to from Markdown headings.
   Note, that this allows you to start at an arbitrary nesting level if you so desire!

*** Unordered lists

    - Unordered list level 1
    -- Unordered list level 2
    --- Unordered list level 3
    ---- Unordered list level 4
    ----- Unordered list level 5
    ------ Unordered list level 6

*** Ordered lists

    ~ Ordered list level 1
    ~~ Ordered list level 2
    ~~~ Ordered list level 3
    ~~~~ Ordered list level 4
    ~~~~~ Ordered list level 5
    ~~~~~~ Ordered list level 6

*** Tasks

    - ( ) Undone -> not done yet
    - (x) Done -> done with that
    - (?) Needs further input

    - (!) Urgent -> high priority task
    - (+) Recurring task with children

    - (-) Pending -> currently in progress
    - (=) Task put on hold
    - (_) Task cancelled (put down)

    The task modifier can be placed on any detached modifier, including
    headings, definitions, footnotes etc. to track their state.

*** Quotes

    > 1. level quote
    >> 2. level quote
    >>> 3. level quote
    >>>> 4. level quote
    >>>>> 5. level quote
    >>>>>> 6. level quote

*** Headings

    You already saw headings up to the third out of six levels. I assume by now you know how they
    work. But now...

**** ... prepare to have your mind blown!

     Because here is something very special and unique to Neorg:

***** Indentation reversion

      As you would expect, this paragraph belongs to the fifth level heading.

****** Final heading level

       And this paragraph belongs to the sixth level. But by using the following modifier:
       ---

      We can move this text to the fifth level again! ðŸ¤¯
      ---

     So using 3 or more `-` signs not followed by anything, you move *one* level backwards in the
     indentation (*NOTE:* this should actually be `2` or more signs as per the latest spec revision,
     but the parser is in the process of being updated).

     Doing the same but with `=` characters instead all heading levels will be closed and
     you will be dropped back to the root level of the document!

** Horizontal Lines

   You can also place horizontal lines using three or more underscores like so:
   ___
   This will never affect the indentation level of the following text, but it will immediately
   terminate the paragraph which is why this is a new paragraph despite the absence of two (or more)
   consecutive new lines.

** Links

   For more info on links check the
   {https://github.com/nvim-neorg/norg-specs/blob/main/1.0-specification.norg#L1340}[spec].

*** Link Targets

    The following things can be used as link /targets/:
    - `* Heading1` (+ nesting levels)
    - `^ Footnote`
    - `$ Definition`
    - `# magic` (any of the above)
    - `:path:# magic` (target in another norg file at a given path)
    - `:path:` (another norg file at a given path without specific target)
    - `/ path` (a non-norg file at a given path)
    - `https://github.com` (a URL)
    - `file:///some/path` (any file, opened via `(xdg-)open`)

    Any of the paths used in `:path:` or `/ path` can be formatted in either of the following ways:
    - `:path/to/norg/file:` relative to the file which contains this link
    - `:/path/from/root:` absolute w.r.t. the entire filesystem
    - `:~/path/from/user/home:` relative to the user's home directory (e.g. `/home/user` on Linux machines)
    - `:../path/to/norg/file:` these paths also understand `../`
    - `:$/path/from/current/workspace:` relative to current workspace root
    - `:$gtd/path/in/gtd/workspace:` relative to the root of the workspace called `gtd`.

** There are multiple ways of using links:

*** Pure link location

    An inline link to {* my heading}.

    The text used for this link can be inferred from the /target/.
    If it is not a norg-target, this falls back to the URL or filename, etc.

*** Custom link text

    An inline link {* my heading}[with custom text].

    This links to the same marker but uses a custom link text.

*** Anchors

    A link to [our website].

    Be sure to check out [our website]{https://github.com/nvim-neorg/neorg}!

    The standalone link /text/ is called an *anchor declaration*.
    It requires an *anchor definition* (last line in the code block) which defines where an anchored link points to.
    This is very useful when you find yourself refering to the same target often.

*** Examples:

    {* Heading 1}
    {** Heading 2}
    {*** Heading 3}
    {**** Heading 4}
    {***** Heading 5}
    {****** Heading 6}
    {******* Heading level above 6}
    {# Generic}
    {$ Definition}
    {^ Footnote}
    {:norg_file:}
    {:norg_file:* Heading 1}
    {:norg_file:** Heading 2}
    {:norg_file:*** Heading 3}
    {:norg_file:**** Heading 4}
    {:norg_file:***** Heading 5}
    {:norg_file:****** Heading 6}
    {:norg_file:******* Heading level above 6}
    {:norg_file:# Generic}
    {:norg_file:* Marker}
    {:norg_file:$ Definition}
    {:norg_file:^ Footnote}
    {https://github.com/}
    {file:///dev/null}
    {/ external_file.txt}

    Note that the following links are malformed:
    {:norg_file:/ external_file.txt}
    {:norg_file:https://github.com/}

** Definitions

   There are two kinds of definitions:

*** Single-paragraph definitions

    $ Term
    The definition of the object in a single paragraph.

    This is not considered part of the definition.

*** Multi-paragraph definitions

    $$ Term
    Here, I can place any number of paragraphs or other format objects.

    Even a code example:
    @code lua
    print("Hello world!")
    @end
    $$

    This is no longer part of the definition because the `$$` on the previous line marked its end.

** Footnotes

   There are also two kinds of footnotes:

*** Single-paragraph footnotes

    ^ This is the title of my footnote. I can use this as a link target.
    This is the actual footnote content.

    This is no longer part of the footnote.

*** Multi-paragraph footnotes

    ^^ This is a multi-paragraph footnote.
    Here go the actual contents...

    ... which I can even continue down here.
    ^^

    Now, the footnote has ended.

** Data Tags

   Neorg supports a number of tags. The general format is:

   @data possible parameters
   contents
   @end

*** Carryover Tags

    Carryover tags are a variant of tags that apply some data to the next object.
    The general syntax looks like this:

    #tagname parameter1 parameter2
    The object to apply the tag to.

    Apart from just `#` you may also use the `+` character. It's best to use `#`
    most of the time, as it applies recursively to the element you're tagging.
    Use `+` only if you don't want your tag to apply recursively to the children
    of an object.

**** Name

    #name awesome quotes
    > This is a quote.
    > We can talk about anything we like

    This quote now has a /name/! You can link to it with the magic char: {# awesome quotes}!

*** Code Blocks

    @code
    console.log("But I want syntax highlighting...")
    @end

    @code javascript
    console.log("Thank you!")
    @end

*** Media

    *NOTE: Media is currently supported only via {https://github.com/3rd/image.nvim}[image.nvim].*

    You can embed images directly in base64 format like so:
    @image png svg jpeg jfif exif
    <base64-encoded image data>
    @end

    Obviously you need to pick one of the available formats.

    You can embed external image or video files like so:
    .image https://raw.githubusercontent.com/nvim-neorg/neorg/main/res/neorg.svg

*** Math

    There are two ways of typesetting mathematics:
    ~ Inline mathematics using the `$` attached modifier like so: $f(x) = y$.
       To access LaTeX-typeset math within inline mathematics, use the [pipe] modifier:
       $|\theta = \frac{\pi}{3}|$
    ~ Multi-line mathematics using the `math` ranged tag which supports any LaTeX-typeset math.
      @math
      f(x) = y
      @end

** Advanced markup

   There are some more advanced markup features:

*** The Link modifier

    If you want to mark-up text which is not surrounded by punctuation or whitespace, you need to
    use the *link* modifier, `:`, like so:

    W:*h*:y w:/oul/:d a:_nyon_:e w:-an-:t to do t:`hi`:s?

*** Nested markup

    You can nest multiple markup groups to combine their effect. Some examples:
    - *Text can be bold _and underlined_!*
    - You can create ,/italic subscripts/,.
    - If you want to shout on the internet, use */_DOUBLY EMPHASIZED AND UNDERLINED CAPS_/*

    Note: You can:*not* combine sub- and superscripts like so:

    ^,This should be super- and subscript.,^ - gets highlighted as an error.

*** Variables

    *NOTE: Variables are not yet implemented in Neorg*

    You can define variables which you can access later in your document like so:

    @code norg
    =variable-name
    value
    =end
    @end

    You can refer to this variable later in your document using the `&` attached modifier like so:

    @code norg
    Insert my &variable&.
    @end

    #comment
    vim:tw=100:ft=norg:norl:conceallevel=0:concealcursor=:
