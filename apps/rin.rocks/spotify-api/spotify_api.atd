(* Generated by jsonschema2atd from openapi.json *)
type json <ocaml module="Yojson.Basic" t="t"> = abstract
type int64 = int <ocaml repr="int64">

type linkedTrackObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type albumRestrictionObjectReason = [
  | Market <json name="market">
  | Product <json name="product">
  | Explicit <json name="explicit">
] <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">

type artistObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this artist.\n">

type artistObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of the artist.\n">

type artistObjectType = [
  | Artist <json name="artist">
] <doc text="The object type.\n">

type simplifiedArtistObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this artist.\n">

type simplifiedArtistObjectType = [
  | Artist <json name="artist">
] <doc text="The object type.\n">

type playHistoryObjectTrackExternal_ids = {
  ?isrc <doc text="[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n">: string option;
  ?ean <doc text="[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n">: string option;
  ?upc <doc text="[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n">: string option;
} <doc text="Known external IDs for the track.\n">

type playHistoryObjectTrackExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type playHistoryObjectTrackLinked_fromExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type playHistoryObjectTrackLinked_from = {
  ?external_urls <doc text="Known external URLs for this track.\n">: playHistoryObjectTrackLinked_fromExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
} <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">

type playHistoryObjectTrackRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type playHistoryObjectTrackType = [
  | Track <json name="track">
] <doc text="The object type: \"track\".\n">

type playHistoryObjectTrack = {
  ?album <doc text="The album on which the track appears. The album object includes a link in `href` to full information about the album.\n">: json option;
  ?artists <doc text="The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n">: artistObject list option;
  ?available_markets <doc text="A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  ?disc_number <doc text="The disc number (usually `1` unless the album consists of more than one disc).\n">: int option;
  ?duration_ms <doc text="The track length in milliseconds.\n">: int option;
  ?explicit <doc text="Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n">: bool option;
  ?external_ids <doc text="Known external IDs for the track.\n">: playHistoryObjectTrackExternal_ids option;
  ?external_urls <doc text="Known external URLs for this track.\n">: playHistoryObjectTrackExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_playable <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n">: bool option;
  ?linked_from <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">: playHistoryObjectTrackLinked_from option;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: playHistoryObjectTrackRestrictions option;
  ?name <doc text="The name of the track.\n">: string option;
  ?popularity <doc text="The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._\n">: int option;
  ?preview_url <doc text="A link to a 30 second preview (MP3 format) of the track. Can be `null`\n">: string nullable option;
  ?track_number <doc text="The number of the track. If an album has several discs, the track number is the number on the specified disc.\n">: int option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: playHistoryObjectTrackType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_local <doc text="Whether or not the track is from a local file.\n">: bool option;
} <doc text="The track the user listened to.">

type playHistoryObjectContextExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this context.">

type playHistoryObjectContext = {
  ?type_ <json name="type"> <doc text="The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\".\n">: string option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.">: string option;
  ?external_urls <doc text="External URLs for this context.">: playHistoryObjectContextExternal_urls option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.\n">: string option;
} <doc text="The context the track was played from.">

type playlistTrackObjectAdded_byExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known public external URLs for this user.\n">

type playlistTrackObjectAdded_byFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of this user.\n">

type playlistTrackObjectAdded_byType = [
  | User <json name="user">
] <doc text="The object type.\n">

type playlistTrackObjectAdded_by = {
  ?external_urls <doc text="Known public external URLs for this user.\n">: playlistTrackObjectAdded_byExternal_urls option;
  ?followers <doc text="Information about the followers of this user.\n">: playlistTrackObjectAdded_byFollowers option;
  ?href <doc text="A link to the Web API endpoint for this user.\n">: string option;
  ?id <doc text="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type.\n">: playlistTrackObjectAdded_byType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
} <doc text="The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._\n">

type playlistTrackObjectTrack = [
  | TrackObject of trackObject
  | EpisodeObject of episodeObject
] <json adapter.ocaml="Jsonschema2atd_runtime.Adapter.One_of"> <doc text="Information about the track or episode.">

type queueObjectCurrently_playing = [
  | TrackObject of trackObject
  | EpisodeObject of episodeObject
] <json adapter.ocaml="Jsonschema2atd_runtime.Adapter.One_of"> <doc text="The currently playing track or episode. Can be `null`.">

type queueObjectQueue = [
  | TrackObject of trackObject
  | EpisodeObject of episodeObject
] <json adapter.ocaml="Jsonschema2atd_runtime.Adapter.One_of"> 

type currentlyPlayingContextObjectDevice = {
  ?id <doc text="The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.">: string nullable option;
  ?is_active <doc text="If this device is the currently active device.">: bool option;
  ?is_private_session <doc text="If this device is currently in a private session.">: bool option;
  ?is_restricted <doc text="Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.">: bool option;
  ?name <doc text="A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.">: string option;
  ?type_ <json name="type"> <doc text="Device type, such as \"computer\", \"smartphone\" or \"speaker\".">: string option;
  ?volume_percent <doc text="The current volume in percent.">: int nullable option;
  ?supports_volume <doc text="If this device can be used to set the volume.">: bool option;
} <doc text="The device that is currently active.\n">

type currentlyPlayingContextObjectContextExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this context.">

type currentlyPlayingContextObjectContext = {
  ?type_ <json name="type"> <doc text="The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\".\n">: string option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.">: string option;
  ?external_urls <doc text="External URLs for this context.">: currentlyPlayingContextObjectContextExternal_urls option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.\n">: string option;
} <doc text="A Context Object. Can be `null`.">

type currentlyPlayingContextObjectItem = [
  | TrackObject of trackObject
  | EpisodeObject of episodeObject
] <json adapter.ocaml="Jsonschema2atd_runtime.Adapter.One_of"> <doc text="The currently playing track or episode. Can be `null`.">

type currentlyPlayingContextObjectActions = {
  ?interrupting_playback <doc text="Interrupting playback. Optional field.">: bool option;
  ?pausing <doc text="Pausing. Optional field.">: bool option;
  ?resuming <doc text="Resuming. Optional field.">: bool option;
  ?seeking <doc text="Seeking playback location. Optional field.">: bool option;
  ?skipping_next <doc text="Skipping to the next context. Optional field.">: bool option;
  ?skipping_prev <doc text="Skipping to the previous context. Optional field.">: bool option;
  ?toggling_repeat_context <doc text="Toggling repeat context flag. Optional field.">: bool option;
  ?toggling_shuffle <doc text="Toggling shuffle flag. Optional field.">: bool option;
  ?toggling_repeat_track <doc text="Toggling repeat track flag. Optional field.">: bool option;
  ?transferring_playback <doc text="Transfering playback between devices. Optional field.">: bool option;
} <doc text="Allows to update the user interface based on which playback actions are available within the current context.\n">

type privateUserObjectExplicit_content = {
  ?filter_enabled <doc text="When `true`, indicates that explicit content should not be played.\n">: bool option;
  ?filter_locked <doc text="When `true`, indicates that the explicit content setting is locked and can't be changed by the user.\n">: bool option;
} <doc text="The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._\n">

type privateUserObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this user.">

type privateUserObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of the user.">

type publicUserObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known public external URLs for this user.\n">

type publicUserObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of this user.\n">

type publicUserObjectType = [
  | User <json name="user">
] <doc text="The object type.\n">

type audioAnalysisObjectMeta = {
  ?analyzer_version <doc text="The version of the Analyzer used to analyze this track.">: string option;
  ?platform <doc text="The platform used to read the track's audio data.">: string option;
  ?detailed_status <doc text="A detailed status code for this track. If analysis data is missing, this code may explain why.">: string option;
  ?status_code <doc text="The return code of the analyzer process. 0 if successful, 1 if any errors occurred.">: int option;
  ?timestamp <doc text="The Unix timestamp (in seconds) at which this track was analyzed.">: int64 option;
  ?analysis_time <doc text="The amount of time taken to analyze this track.">: float option;
  ?input_process <doc text="The method used to read the track's audio data.">: string option;
} 

type audioAnalysisObjectTrack = {
  ?num_samples <doc text="The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.">: int option;
  ?duration <doc text="Length of the track in seconds.">: float option;
  ?sample_md5 <doc text="This field will always contain the empty string.">: string option;
  ?offset_seconds <doc text="An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)">: int option;
  ?window_seconds <doc text="The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)">: int option;
  ?analysis_sample_rate <doc text="The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.">: int option;
  ?analysis_channels <doc text="The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.">: int option;
  ?end_of_fade_in <doc text="The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.">: float option;
  ?start_of_fade_out <doc text="The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.">: float option;
  ?loudness : loudness option;
  ?tempo : tempo option;
  ?tempo_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.">: float option;
  ?time_signature : timeSignature option;
  ?time_signature_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.">: float option;
  ?key : key option;
  ?key_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `key`.">: float option;
  ?mode : mode option;
  ?mode_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `mode`.">: float option;
  ?codestring <doc text="An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.">: string option;
  ?code_version <doc text="A version number for the Echo Nest Musical Fingerprint format used in the codestring field.">: float option;
  ?echoprintstring <doc text="An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.">: string option;
  ?echoprint_version <doc text="A version number for the EchoPrint format used in the echoprintstring field.">: float option;
  ?synchstring <doc text="A [Synchstring](https://github.com/echonest/synchdata) for this track.">: string option;
  ?synch_version <doc text="A version number for the Synchstring used in the synchstring field.">: float option;
  ?rhythmstring <doc text="A Rhythmstring for this track. The format of this string is similar to the Synchstring.">: string option;
  ?rhythm_version <doc text="A version number for the Rhythmstring used in the rhythmstring field.">: float option;
} 

type sectionObjectMode = float <doc text="Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.">

type audioFeaturesObjectType = [
  | Audio_features <json name="audio_features">
] <doc text="The object type.\n">

type simplifiedTrackObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this track.\n">

type simplifiedTrackObjectLinked_fromExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type simplifiedTrackObjectLinked_from = {
  ?external_urls <doc text="Known external URLs for this track.\n">: simplifiedTrackObjectLinked_fromExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
} <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.">

type simplifiedTrackObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type cursorPagingObjectCursors = {
  ?after <doc text="The cursor to use as key to find the next page of items.">: string option;
  ?before <doc text="The cursor to use as key to find the previous page of items.">: string option;
} <doc text="The cursors used to find the next set of items.">

type cursorPagingPlayHistoryObjectCursors = {
  ?after <doc text="The cursor to use as key to find the next page of items.">: string option;
  ?before <doc text="The cursor to use as key to find the previous page of items.">: string option;
} <doc text="The cursors used to find the next set of items.">

type cursorPagingSimplifiedArtistObjectCursors = {
  ?after <doc text="The cursor to use as key to find the next page of items.">: string option;
  ?before <doc text="The cursor to use as key to find the previous page of items.">: string option;
} <doc text="The cursors used to find the next set of items.">

type savedTrackObjectTrackExternal_ids = {
  ?isrc <doc text="[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n">: string option;
  ?ean <doc text="[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n">: string option;
  ?upc <doc text="[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n">: string option;
} <doc text="Known external IDs for the track.\n">

type savedTrackObjectTrackExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type savedTrackObjectTrackLinked_fromExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type savedTrackObjectTrackLinked_from = {
  ?external_urls <doc text="Known external URLs for this track.\n">: savedTrackObjectTrackLinked_fromExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
} <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">

type savedTrackObjectTrackRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type savedTrackObjectTrackType = [
  | Track <json name="track">
] <doc text="The object type: \"track\".\n">

type savedTrackObjectTrack = {
  ?album <doc text="The album on which the track appears. The album object includes a link in `href` to full information about the album.\n">: json option;
  ?artists <doc text="The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n">: artistObject list option;
  ?available_markets <doc text="A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  ?disc_number <doc text="The disc number (usually `1` unless the album consists of more than one disc).\n">: int option;
  ?duration_ms <doc text="The track length in milliseconds.\n">: int option;
  ?explicit <doc text="Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n">: bool option;
  ?external_ids <doc text="Known external IDs for the track.\n">: savedTrackObjectTrackExternal_ids option;
  ?external_urls <doc text="Known external URLs for this track.\n">: savedTrackObjectTrackExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_playable <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n">: bool option;
  ?linked_from <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">: savedTrackObjectTrackLinked_from option;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: savedTrackObjectTrackRestrictions option;
  ?name <doc text="The name of the track.\n">: string option;
  ?popularity <doc text="The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._\n">: int option;
  ?preview_url <doc text="A link to a 30 second preview (MP3 format) of the track. Can be `null`\n">: string nullable option;
  ?track_number <doc text="The number of the track. If an album has several discs, the track number is the number on the specified disc.\n">: int option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: savedTrackObjectTrackType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_local <doc text="Whether or not the track is from a local file.\n">: bool option;
} <doc text="Information about the track.">

type playlistObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this playlist.\n">

type playlistObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of the playlist.">

type simplifiedPlaylistObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this playlist.\n">

type simplifiedPlaylistObjectTracks = {
  ?href <doc text="A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.\n">: string option;
  ?total <doc text="Number of tracks in the playlist.\n">: int option;
} <doc text="A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.\n">

type playlistUserObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known public external URLs for this user.\n">

type playlistUserObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of this user.\n">

type playlistUserObjectType = [
  | User <json name="user">
] <doc text="The object type.\n">

type playlistOwnerObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known public external URLs for this user.\n">

type playlistOwnerObjectFollowers = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} <doc text="Information about the followers of this user.\n">

type playlistOwnerObjectType = [
  | User <json name="user">
] <doc text="The object type.\n">

type trackObjectExternal_ids = {
  ?isrc <doc text="[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n">: string option;
  ?ean <doc text="[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n">: string option;
  ?upc <doc text="[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n">: string option;
} <doc text="Known external IDs for the track.\n">

type trackObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type trackObjectLinked_fromExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this track.\n">

type trackObjectLinked_from = {
  ?external_urls <doc text="Known external URLs for this track.\n">: trackObjectLinked_fromExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
} <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">

type trackObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type trackObjectType = [
  | Track <json name="track">
] <doc text="The object type: \"track\".\n">

type episodeObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this episode.\n">

type episodeObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type episodeObjectResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type episodeObjectType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type episodeObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type simplifiedEpisodeObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this episode.\n">

type simplifiedEpisodeObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type simplifiedEpisodeObjectResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type simplifiedEpisodeObjectType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type simplifiedEpisodeObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type episodeBaseExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this episode.\n">

type episodeBaseRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type episodeBaseResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type episodeBaseType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type episodeBaseRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type showBaseExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this show.\n">

type showBaseType = [
  | Show <json name="show">
] <doc text="The object type.\n">

type showObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this show.\n">

type showObjectType = [
  | Show <json name="show">
] <doc text="The object type.\n">

type simplifiedShowObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this show.\n">

type simplifiedShowObjectType = [
  | Show <json name="show">
] <doc text="The object type.\n">

type audiobookBaseExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this audiobook.\n">

type audiobookBaseType = [
  | Audiobook <json name="audiobook">
] <doc text="The object type.\n">

type audiobookObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this audiobook.\n">

type audiobookObjectType = [
  | Audiobook <json name="audiobook">
] <doc text="The object type.\n">

type simplifiedAudiobookObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this audiobook.\n">

type simplifiedAudiobookObjectType = [
  | Audiobook <json name="audiobook">
] <doc text="The object type.\n">

type albumBaseAlbum_type = [
  | Album <json name="album">
  | Single <json name="single">
  | Compilation <json name="compilation">
] <doc text="The type of the album.\n">

type albumBaseExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this album.\n">

type albumBaseRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type albumBaseRestrictionsReason = [
  | Market <json name="market">
  | Product <json name="product">
  | Explicit <json name="explicit">
] <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">

type albumBaseRestrictions = {
  ?reason <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">: albumBaseRestrictionsReason option;
} <doc text="Included in the response when a content restriction is applied.\n">

type albumBaseType = [
  | Album <json name="album">
] <doc text="The object type.\n">

type simplifiedAlbumObjectAlbum_type = [
  | Album <json name="album">
  | Single <json name="single">
  | Compilation <json name="compilation">
] <doc text="The type of the album.\n">

type simplifiedAlbumObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this album.\n">

type simplifiedAlbumObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type simplifiedAlbumObjectRestrictionsReason = [
  | Market <json name="market">
  | Product <json name="product">
  | Explicit <json name="explicit">
] <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">

type simplifiedAlbumObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">: simplifiedAlbumObjectRestrictionsReason option;
} <doc text="Included in the response when a content restriction is applied.\n">

type simplifiedAlbumObjectType = [
  | Album <json name="album">
] <doc text="The object type.\n">

type artistDiscographyAlbumObjectAlbum_group = [
  | Album <json name="album">
  | Single <json name="single">
  | Compilation <json name="compilation">
  | Appears_on <json name="appears_on">
] <doc text="This field describes the relationship between the artist and the album.\n">

type chapterObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this chapter.\n">

type chapterObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type chapterObjectResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type chapterObjectType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type chapterObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n- `payment_required` - Payment is required to play the content item.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type simplifiedChapterObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this chapter.\n">

type simplifiedChapterObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type simplifiedChapterObjectResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type simplifiedChapterObjectType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type simplifiedChapterObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n- `payment_required` - Payment is required to play the content item.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type chapterBaseExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this chapter.\n">

type chapterBaseRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type chapterBaseResume_point = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">

type chapterBaseType = [
  | Episode <json name="episode">
] <doc text="The object type.\n">

type chapterBaseRestrictions = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n- `payment_required` - Payment is required to play the content item.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} <doc text="Included in the response when a content restriction is applied.\n">

type albumObjectAlbum_type = [
  | Album <json name="album">
  | Single <json name="single">
  | Compilation <json name="compilation">
] <doc text="The type of the album.\n">

type albumObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="Known external URLs for this album.\n">

type albumObjectRelease_date_precision = [
  | Year <json name="year">
  | Month <json name="month">
  | Day <json name="day">
] <doc text="The precision with which `release_date` value is known.\n">

type albumObjectRestrictionsReason = [
  | Market <json name="market">
  | Product <json name="product">
  | Explicit <json name="explicit">
] <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">

type albumObjectRestrictions = {
  ?reason <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">: albumObjectRestrictionsReason option;
} <doc text="Included in the response when a content restriction is applied.\n">

type albumObjectType = [
  | Album <json name="album">
] <doc text="The object type.\n">

type albumObjectExternal_ids = {
  ?isrc <doc text="[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n">: string option;
  ?ean <doc text="[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n">: string option;
  ?upc <doc text="[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n">: string option;
} <doc text="Known external IDs for the album.\n">

type contextObjectExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this context.">

type currentlyPlayingObjectContextExternal_urls = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} <doc text="External URLs for this context.">

type currentlyPlayingObjectContext = {
  ?type_ <json name="type"> <doc text="The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\".\n">: string option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.">: string option;
  ?external_urls <doc text="External URLs for this context.">: currentlyPlayingObjectContextExternal_urls option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.\n">: string option;
} <doc text="A Context Object. Can be `null`.">

type currentlyPlayingObjectItem = [
  | TrackObject of trackObject
  | EpisodeObject of episodeObject
] <json adapter.ocaml="Jsonschema2atd_runtime.Adapter.One_of"> <doc text="The currently playing track or episode. Can be `null`.">

type currentlyPlayingObjectActions = {
  ?interrupting_playback <doc text="Interrupting playback. Optional field.">: bool option;
  ?pausing <doc text="Pausing. Optional field.">: bool option;
  ?resuming <doc text="Resuming. Optional field.">: bool option;
  ?seeking <doc text="Seeking playback location. Optional field.">: bool option;
  ?skipping_next <doc text="Skipping to the next context. Optional field.">: bool option;
  ?skipping_prev <doc text="Skipping to the previous context. Optional field.">: bool option;
  ?toggling_repeat_context <doc text="Toggling repeat context flag. Optional field.">: bool option;
  ?toggling_shuffle <doc text="Toggling shuffle flag. Optional field.">: bool option;
  ?toggling_repeat_track <doc text="Toggling repeat track flag. Optional field.">: bool option;
  ?transferring_playback <doc text="Transfering playback between devices. Optional field.">: bool option;
} <doc text="Allows to update the user interface based on which playback actions are available within the current context.\n">

type pagingSavedAudiobookObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : savedAudiobookObject list;
} 

type savedAudiobookObject = {
  ?added_at <doc text="The date and time the audiobook was saved\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n">: string option;
  ?audiobook <doc text="Information about the audiobook.">: json option;
} 

type currentlyPlayingObject = {
  ?context <doc text="A Context Object. Can be `null`.">: currentlyPlayingObjectContext option;
  ?timestamp <doc text="Unix Millisecond Timestamp when data was fetched">: int64 option;
  ?progress_ms <doc text="Progress into the currently playing track or episode. Can be `null`.">: int option;
  ?is_playing <doc text="If something is currently playing, return `true`.">: bool option;
  ?item <doc text="The currently playing track or episode. Can be `null`.">: currentlyPlayingObjectItem option;
  ?currently_playing_type <doc text="The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.\n">: string option;
  ?actions <doc text="Allows to update the user interface based on which playback actions are available within the current context.\n">: currentlyPlayingObjectActions option;
} 

type explicitContentSettingsObject = {
  ?filter_enabled <doc text="When `true`, indicates that explicit content should not be played.\n">: bool option;
  ?filter_locked <doc text="When `true`, indicates that the explicit content setting is locked and can't be changed by the user.\n">: bool option;
} 

type imageObject = {
  url <doc text="The source URL of the image.\n">: string;
  height <doc text="The image height in pixels.\n">: int nullable;
  width <doc text="The image width in pixels.\n">: int nullable;
} 

type followersObject = {
  ?href <doc text="This will always be set to null, as the Web API does not support it at the moment.\n">: string nullable option;
  ?total <doc text="The total number of followers.\n">: int option;
} 

type externalUrlObject = {
  ?spotify <doc text="The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.\n">: string option;
} 

type externalIdObject = {
  ?isrc <doc text="[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)\n">: string option;
  ?ean <doc text="[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)\n">: string option;
  ?upc <doc text="[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)\n">: string option;
} 

type narratorObject = {
  ?name <doc text="The name of the Narrator.\n">: string option;
} 

type authorObject = {
  ?name <doc text="The name of the author.\n">: string option;
} 

type copyrightObject = {
  ?text <doc text="The copyright text for this content.\n">: string option;
  ?type_ <json name="type"> <doc text="The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.\n">: string option;
} 

type contextObject = {
  ?type_ <json name="type"> <doc text="The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\".\n">: string option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.">: string option;
  ?external_urls <doc text="External URLs for this context.">: contextObjectExternal_urls option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.\n">: string option;
} 

type albumObject = {
  album_type <doc text="The type of the album.\n">: albumObjectAlbum_type;
  total_tracks <doc text="The number of tracks in the album.">: int;
  available_markets <doc text="The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._\n">: string list;
  external_urls <doc text="Known external URLs for this album.\n">: albumObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the album.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
  images <doc text="The cover art for the album in various sizes, widest first.\n">: imageObject list;
  name <doc text="The name of the album. In case of an album takedown, the value may be an empty string.\n">: string;
  release_date <doc text="The date the album was first released.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: albumObjectRelease_date_precision;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: albumObjectRestrictions option;
  type_ <json name="type"> <doc text="The object type.\n">: albumObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
  artists <doc text="The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.\n">: simplifiedArtistObject list;
  tracks <doc text="The tracks of the album.\n">: json;
  copyrights <doc text="The copyright statements of the album.\n">: copyrightObject list;
  external_ids <doc text="Known external IDs for the album.\n">: albumObjectExternal_ids;
  genres <doc text="A list of the genres the album is associated with. If not yet classified, the array is empty.\n">: string list;
  label <doc text="The label associated with the album.\n">: string;
  popularity <doc text="The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.\n">: int;
} 

type chapterBase = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.\n">: string nullable;
  ?available_markets <doc text="A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  chapter_number <doc text="The number of the chapter\n">: int;
  description <doc text="A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the chapter. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The chapter length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this chapter.\n">: chapterBaseExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the chapter.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  images <doc text="The cover art for the chapter in various sizes, widest first.\n">: imageObject list;
  is_playable <doc text="True if the chapter is playable in the given market. Otherwise false.\n">: bool;
  languages <doc text="A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the chapter.\n">: string;
  release_date <doc text="The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: chapterBaseRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: chapterBaseResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: chapterBaseType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: chapterBaseRestrictions option;
} 

type simplifiedChapterObject = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.\n">: string nullable;
  ?available_markets <doc text="A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  chapter_number <doc text="The number of the chapter\n">: int;
  description <doc text="A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the chapter. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The chapter length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this chapter.\n">: simplifiedChapterObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the chapter.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  images <doc text="The cover art for the chapter in various sizes, widest first.\n">: imageObject list;
  is_playable <doc text="True if the chapter is playable in the given market. Otherwise false.\n">: bool;
  languages <doc text="A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the chapter.\n">: string;
  release_date <doc text="The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: simplifiedChapterObjectRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: simplifiedChapterObjectResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: simplifiedChapterObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: simplifiedChapterObjectRestrictions option;
} 

type chapterObject = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.\n">: string nullable;
  ?available_markets <doc text="A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  chapter_number <doc text="The number of the chapter\n">: int;
  description <doc text="A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the chapter. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The chapter length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this chapter.\n">: chapterObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the chapter.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  images <doc text="The cover art for the chapter in various sizes, widest first.\n">: imageObject list;
  is_playable <doc text="True if the chapter is playable in the given market. Otherwise false.\n">: bool;
  languages <doc text="A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the chapter.\n">: string;
  release_date <doc text="The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: chapterObjectRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: chapterObjectResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: chapterObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: chapterObjectRestrictions option;
  audiobook <doc text="The audiobook for which the chapter belongs.\n">: json;
} 

type artistDiscographyAlbumObject = {
  album_group <doc text="This field describes the relationship between the artist and the album.\n">: artistDiscographyAlbumObjectAlbum_group;
} 

type simplifiedAlbumObject = {
  album_type <doc text="The type of the album.\n">: simplifiedAlbumObjectAlbum_type;
  total_tracks <doc text="The number of tracks in the album.">: int;
  available_markets <doc text="The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._\n">: string list;
  external_urls <doc text="Known external URLs for this album.\n">: simplifiedAlbumObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the album.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
  images <doc text="The cover art for the album in various sizes, widest first.\n">: imageObject list;
  name <doc text="The name of the album. In case of an album takedown, the value may be an empty string.\n">: string;
  release_date <doc text="The date the album was first released.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: simplifiedAlbumObjectRelease_date_precision;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: simplifiedAlbumObjectRestrictions option;
  type_ <json name="type"> <doc text="The object type.\n">: simplifiedAlbumObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
  artists <doc text="The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.\n">: simplifiedArtistObject list;
} 

type albumBase = {
  album_type <doc text="The type of the album.\n">: albumBaseAlbum_type;
  total_tracks <doc text="The number of tracks in the album.">: int;
  available_markets <doc text="The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._\n">: string list;
  external_urls <doc text="Known external URLs for this album.\n">: albumBaseExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the album.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
  images <doc text="The cover art for the album in various sizes, widest first.\n">: imageObject list;
  name <doc text="The name of the album. In case of an album takedown, the value may be an empty string.\n">: string;
  release_date <doc text="The date the album was first released.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: albumBaseRelease_date_precision;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: albumBaseRestrictions option;
  type_ <json name="type"> <doc text="The object type.\n">: albumBaseType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.\n">: string;
} 

type simplifiedAudiobookObject = {
  authors <doc text="The author(s) for the audiobook.\n">: authorObject list;
  available_markets <doc text="A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the audiobook.\n">: copyrightObject list;
  description <doc text="A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the audiobook. This field may contain HTML tags.\n">: string;
  ?edition <doc text="The edition of the audiobook.\n">: string option;
  explicit <doc text="Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this audiobook.\n">: simplifiedAudiobookObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the audiobook.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  images <doc text="The cover art for the audiobook in various sizes, widest first.\n">: imageObject list;
  languages <doc text="A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the audiobook.\n">: string;
  name <doc text="The name of the audiobook.\n">: string;
  narrators <doc text="The narrator(s) for the audiobook.\n">: narratorObject list;
  publisher <doc text="The publisher of the audiobook.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: simplifiedAudiobookObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  total_chapters <doc text="The number of chapters in this audiobook.\n">: int;
} 

type audiobookObject = {
  authors <doc text="The author(s) for the audiobook.\n">: authorObject list;
  available_markets <doc text="A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the audiobook.\n">: copyrightObject list;
  description <doc text="A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the audiobook. This field may contain HTML tags.\n">: string;
  ?edition <doc text="The edition of the audiobook.\n">: string option;
  explicit <doc text="Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this audiobook.\n">: audiobookObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the audiobook.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  images <doc text="The cover art for the audiobook in various sizes, widest first.\n">: imageObject list;
  languages <doc text="A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the audiobook.\n">: string;
  name <doc text="The name of the audiobook.\n">: string;
  narrators <doc text="The narrator(s) for the audiobook.\n">: narratorObject list;
  publisher <doc text="The publisher of the audiobook.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: audiobookObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  total_chapters <doc text="The number of chapters in this audiobook.\n">: int;
  chapters <doc text="The chapters of the audiobook.\n">: json;
} 

type audiobookBase = {
  authors <doc text="The author(s) for the audiobook.\n">: authorObject list;
  available_markets <doc text="A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the audiobook.\n">: copyrightObject list;
  description <doc text="A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the audiobook. This field may contain HTML tags.\n">: string;
  ?edition <doc text="The edition of the audiobook.\n">: string option;
  explicit <doc text="Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this audiobook.\n">: audiobookBaseExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the audiobook.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  images <doc text="The cover art for the audiobook in various sizes, widest first.\n">: imageObject list;
  languages <doc text="A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the audiobook.\n">: string;
  name <doc text="The name of the audiobook.\n">: string;
  narrators <doc text="The narrator(s) for the audiobook.\n">: narratorObject list;
  publisher <doc text="The publisher of the audiobook.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: audiobookBaseType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.\n">: string;
  total_chapters <doc text="The number of chapters in this audiobook.\n">: int;
} 

type simplifiedShowObject = {
  available_markets <doc text="A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the show.\n">: copyrightObject list;
  description <doc text="A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the show. This field may contain HTML tags.\n">: string;
  explicit <doc text="Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this show.\n">: simplifiedShowObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the show.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  images <doc text="The cover art for the show in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.\n">: bool;
  languages <doc text="A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the show.\n">: string;
  name <doc text="The name of the episode.\n">: string;
  publisher <doc text="The publisher of the show.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: simplifiedShowObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  total_episodes <doc text="The total number of episodes in the show.\n">: int;
} 

type showObject = {
  available_markets <doc text="A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the show.\n">: copyrightObject list;
  description <doc text="A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the show. This field may contain HTML tags.\n">: string;
  explicit <doc text="Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this show.\n">: showObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the show.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  images <doc text="The cover art for the show in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.\n">: bool;
  languages <doc text="A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the show.\n">: string;
  name <doc text="The name of the episode.\n">: string;
  publisher <doc text="The publisher of the show.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: showObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  total_episodes <doc text="The total number of episodes in the show.\n">: int;
  episodes <doc text="The episodes of the show.\n">: json;
} 

type showBase = {
  available_markets <doc text="A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list;
  copyrights <doc text="The copyright statements of the show.\n">: copyrightObject list;
  description <doc text="A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the show. This field may contain HTML tags.\n">: string;
  explicit <doc text="Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this show.\n">: showBaseExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the show.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  images <doc text="The cover art for the show in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.\n">: bool;
  languages <doc text="A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  media_type <doc text="The media type of the show.\n">: string;
  name <doc text="The name of the episode.\n">: string;
  publisher <doc text="The publisher of the show.\n">: string;
  type_ <json name="type"> <doc text="The object type.\n">: showBaseType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.\n">: string;
  total_episodes <doc text="The total number of episodes in the show.\n">: int;
} 

type resumePointObject = {
  ?fully_played <doc text="Whether or not the episode has been fully played by the user.\n">: bool option;
  ?resume_position_ms <doc text="The user's most recent position in the episode in milliseconds.\n">: int option;
} 

type episodeBase = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.\n">: string nullable;
  description <doc text="A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the episode. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The episode length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this episode.\n">: episodeBaseExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the episode.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  images <doc text="The cover art for the episode in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if the episode is hosted outside of Spotify's CDN.\n">: bool;
  is_playable <doc text="True if the episode is playable in the given market. Otherwise false.\n">: bool;
  ?language <doc text="The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.\n">: string option;
  languages <doc text="A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the episode.\n">: string;
  release_date <doc text="The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: episodeBaseRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: episodeBaseResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: episodeBaseType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: episodeBaseRestrictions option;
} 

type simplifiedEpisodeObject = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.\n">: string nullable;
  description <doc text="A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the episode. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The episode length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this episode.\n">: simplifiedEpisodeObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the episode.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  images <doc text="The cover art for the episode in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if the episode is hosted outside of Spotify's CDN.\n">: bool;
  is_playable <doc text="True if the episode is playable in the given market. Otherwise false.\n">: bool;
  ?language <doc text="The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.\n">: string option;
  languages <doc text="A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the episode.\n">: string;
  release_date <doc text="The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: simplifiedEpisodeObjectRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: simplifiedEpisodeObjectResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: simplifiedEpisodeObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: simplifiedEpisodeObjectRestrictions option;
} 

type episodeObject = {
  audio_preview_url <doc text="A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.\n">: string nullable;
  description <doc text="A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.\n">: string;
  html_description <doc text="A description of the episode. This field may contain HTML tags.\n">: string;
  duration_ms <doc text="The episode length in milliseconds.\n">: int;
  explicit <doc text="Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).\n">: bool;
  external_urls <doc text="External URLs for this episode.\n">: episodeObjectExternal_urls;
  href <doc text="A link to the Web API endpoint providing full details of the episode.\n">: string;
  id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  images <doc text="The cover art for the episode in various sizes, widest first.\n">: imageObject list;
  is_externally_hosted <doc text="True if the episode is hosted outside of Spotify's CDN.\n">: bool;
  is_playable <doc text="True if the episode is playable in the given market. Otherwise false.\n">: bool;
  ?language <doc text="The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.\n">: string option;
  languages <doc text="A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.\n">: string list;
  name <doc text="The name of the episode.\n">: string;
  release_date <doc text="The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`.\n">: string;
  release_date_precision <doc text="The precision with which `release_date` value is known.\n">: episodeObjectRelease_date_precision;
  ?resume_point <doc text="The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.\n">: episodeObjectResume_point option;
  type_ <json name="type"> <doc text="The object type.\n">: episodeObjectType;
  uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.\n">: string;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: episodeObjectRestrictions option;
  show <doc text="The show on which the episode belongs.\n">: json;
} 

type trackObject = {
  ?album <doc text="The album on which the track appears. The album object includes a link in `href` to full information about the album.\n">: json option;
  ?artists <doc text="The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.\n">: artistObject list option;
  ?available_markets <doc text="A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  ?disc_number <doc text="The disc number (usually `1` unless the album consists of more than one disc).\n">: int option;
  ?duration_ms <doc text="The track length in milliseconds.\n">: int option;
  ?explicit <doc text="Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).\n">: bool option;
  ?external_ids <doc text="Known external IDs for the track.\n">: trackObjectExternal_ids option;
  ?external_urls <doc text="Known external URLs for this track.\n">: trackObjectExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_playable <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n">: bool option;
  ?linked_from <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.">: trackObjectLinked_from option;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: trackObjectRestrictions option;
  ?name <doc text="The name of the track.\n">: string option;
  ?popularity <doc text="The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._\n">: int option;
  ?preview_url <doc text="A link to a 30 second preview (MP3 format) of the track. Can be `null`\n">: string nullable option;
  ?track_number <doc text="The number of the track. If an album has several discs, the track number is the number on the specified disc.\n">: int option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: trackObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_local <doc text="Whether or not the track is from a local file.\n">: bool option;
} 

type categoryObject = {
  href <doc text="A link to the Web API endpoint returning full details of the category.\n">: string;
  icons <doc text="The category icon, in various sizes.\n">: imageObject list;
  id <doc text="The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.\n">: string;
  name <doc text="The name of the category.\n">: string;
} 

type playlistOwnerObject = {
  ?external_urls <doc text="Known public external URLs for this user.\n">: playlistOwnerObjectExternal_urls option;
  ?followers <doc text="Information about the followers of this user.\n">: playlistOwnerObjectFollowers option;
  ?href <doc text="A link to the Web API endpoint for this user.\n">: string option;
  ?id <doc text="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type.\n">: playlistOwnerObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
  ?display_name <doc text="The name displayed on the user's profile. `null` if not available.\n">: string nullable option;
} 

type playlistUserObject = {
  ?external_urls <doc text="Known public external URLs for this user.\n">: playlistUserObjectExternal_urls option;
  ?followers <doc text="Information about the followers of this user.\n">: playlistUserObjectFollowers option;
  ?href <doc text="A link to the Web API endpoint for this user.\n">: string option;
  ?id <doc text="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type.\n">: playlistUserObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
} 

type playlistTracksRefObject = {
  ?href <doc text="A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.\n">: string option;
  ?total <doc text="Number of tracks in the playlist.\n">: int option;
} 

type simplifiedPlaylistObject = {
  ?collaborative <doc text="`true` if the owner allows other users to modify the playlist.\n">: bool option;
  ?description <doc text="The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.\n">: string option;
  ?external_urls <doc text="Known external URLs for this playlist.\n">: simplifiedPlaylistObjectExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the playlist.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.\n">: string option;
  ?images <doc text="Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._\n">: imageObject list option;
  ?name <doc text="The name of the playlist.\n">: string option;
  ?owner <doc text="The user who owns the playlist\n">: json option;
  ?public <doc text="The playlist's public/private status (if it is added to the user's profile): `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)\n">: bool option;
  ?snapshot_id <doc text="The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n">: string option;
  ?tracks <doc text="A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.\n">: simplifiedPlaylistObjectTracks option;
  ?type_ <json name="type"> <doc text="The object type: \"playlist\"\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.\n">: string option;
} 

type playlistObject = {
  ?collaborative <doc text="`true` if the owner allows other users to modify the playlist.\n">: bool option;
  ?description <doc text="The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.\n">: string nullable option;
  ?external_urls <doc text="Known external URLs for this playlist.\n">: playlistObjectExternal_urls option;
  ?followers <doc text="Information about the followers of the playlist.">: playlistObjectFollowers option;
  ?href <doc text="A link to the Web API endpoint providing full details of the playlist.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.\n">: string option;
  ?images <doc text="Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._\n">: imageObject list option;
  ?name <doc text="The name of the playlist.\n">: string option;
  ?owner <doc text="The user who owns the playlist\n">: json option;
  ?public <doc text="The playlist's public/private status (if it is added to the user's profile): `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)\n">: bool option;
  ?snapshot_id <doc text="The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n">: string option;
  ?tracks <doc text="The tracks of the playlist.\n">: json option;
  ?type_ <json name="type"> <doc text="The object type: \"playlist\"\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.\n">: string option;
} 

type savedShowObject = {
  ?added_at <doc text="The date and time the show was saved.\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n">: string option;
  ?show <doc text="Information about the show.">: json option;
} 

type savedEpisodeObject = {
  ?added_at <doc text="The date and time the episode was saved.\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\n">: string option;
  ?episode <doc text="Information about the episode.">: json option;
} 

type savedTrackObject = {
  ?added_at <doc text="The date and time the track was saved.\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n">: string option;
  ?track <doc text="Information about the track.">: savedTrackObjectTrack option;
} 

type savedAlbumObject = {
  ?added_at <doc text="The date and time the album was saved\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.\n">: string option;
  ?album <doc text="Information about the album.">: json option;
} 

type recommendationSeedObject = {
  ?afterFilteringSize <doc text="The number of tracks available after min\\_\\* and max\\_\\* filters have been applied.\n">: int option;
  ?afterRelinkingSize <doc text="The number of tracks available after relinking for regional availability.\n">: int option;
  ?href <doc text="A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.\n">: string option;
  ?id <doc text="The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.\n">: string option;
  ?initialPoolSize <doc text="The number of recommended tracks available for this seed.\n">: int option;
  ?type_ <json name="type"> <doc text="The entity type of this seed. One of `artist`, `track` or `genre`.\n">: string option;
} 

type recommendationsObject = {
  seeds <doc text="An array of recommendation seed objects.\n">: recommendationSeedObject list;
  tracks <doc text="An array of track objects ordered according to the parameters supplied.\n">: trackObject list;
} 

type pagingSimplifiedChapterObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedChapterObject list;
} 

type pagingArtistObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : artistObject list;
} 

type pagingSimplifiedAudiobookObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedAudiobookObject list;
} 

type pagingSavedEpisodeObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : savedEpisodeObject list;
} 

type pagingSimplifiedEpisodeObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedEpisodeObject list;
} 

type pagingSavedShowObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : savedShowObject list;
} 

type pagingSimplifiedShowObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedShowObject list;
} 

type pagingPlaylistTrackObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : playlistTrackObject list;
} 

type pagingTrackObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : trackObject list;
} 

type pagingSavedTrackObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : savedTrackObject list;
} 

type pagingSimplifiedTrackObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedTrackObject list;
} 

type pagingSavedAlbumObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : savedAlbumObject list;
} 

type pagingSimplifiedAlbumObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedAlbumObject list;
} 

type pagingArtistDiscographyAlbumObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : artistDiscographyAlbumObject list;
} 

type pagingFeaturedPlaylistObject = {
  ?message <doc text="The localized message of a playlist.\n">: string option;
  ?playlists : pagingPlaylistObject option;
} 

type pagingPlaylistObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
  items : simplifiedPlaylistObject list;
} 

type pagingObject = {
  href <doc text="A link to the Web API endpoint returning the full result of the request\n">: string;
  limit <doc text="The maximum number of items in the response (as set in the query or by default).\n">: int;
  next <doc text="URL to the next page of items. ( `null` if none)\n">: string nullable;
  offset <doc text="The offset of the items returned (as set in the query or by default)\n">: int;
  previous <doc text="URL to the previous page of items. ( `null` if none)\n">: string nullable;
  total <doc text="The total number of items available to return.\n">: int;
} 

type cursorPagingSimplifiedArtistObject = {
  ?href <doc text="A link to the Web API endpoint returning the full result of the request.">: string option;
  ?limit <doc text="The maximum number of items in the response (as set in the query or by default).">: int option;
  ?next <doc text="URL to the next page of items. ( `null` if none)">: string option;
  ?cursors <doc text="The cursors used to find the next set of items.">: cursorPagingSimplifiedArtistObjectCursors option;
  ?total <doc text="The total number of items available to return.">: int option;
  ?items : artistObject list option;
} 

type cursorPagingPlayHistoryObject = {
  ?href <doc text="A link to the Web API endpoint returning the full result of the request.">: string option;
  ?limit <doc text="The maximum number of items in the response (as set in the query or by default).">: int option;
  ?next <doc text="URL to the next page of items. ( `null` if none)">: string option;
  ?cursors <doc text="The cursors used to find the next set of items.">: cursorPagingPlayHistoryObjectCursors option;
  ?total <doc text="The total number of items available to return.">: int option;
  ?items : playHistoryObject list option;
} 

type cursorPagingObject = {
  ?href <doc text="A link to the Web API endpoint returning the full result of the request.">: string option;
  ?limit <doc text="The maximum number of items in the response (as set in the query or by default).">: int option;
  ?next <doc text="URL to the next page of items. ( `null` if none)">: string option;
  ?cursors <doc text="The cursors used to find the next set of items.">: cursorPagingObjectCursors option;
  ?total <doc text="The total number of items available to return.">: int option;
} 

type cursorObject = {
  ?after <doc text="The cursor to use as key to find the next page of items.">: string option;
  ?before <doc text="The cursor to use as key to find the previous page of items.">: string option;
} 

type deviceObject = {
  ?id <doc text="The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.">: string nullable option;
  ?is_active <doc text="If this device is the currently active device.">: bool option;
  ?is_private_session <doc text="If this device is currently in a private session.">: bool option;
  ?is_restricted <doc text="Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.">: bool option;
  ?name <doc text="A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.">: string option;
  ?type_ <json name="type"> <doc text="Device type, such as \"computer\", \"smartphone\" or \"speaker\".">: string option;
  ?volume_percent <doc text="The current volume in percent.">: int nullable option;
  ?supports_volume <doc text="If this device can be used to set the volume.">: bool option;
} 

type simplifiedTrackObject = {
  ?artists <doc text="The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.">: simplifiedArtistObject list option;
  ?available_markets <doc text="A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.\n">: string list option;
  ?disc_number <doc text="The disc number (usually `1` unless the album consists of more than one disc).">: int option;
  ?duration_ms <doc text="The track length in milliseconds.">: int option;
  ?explicit <doc text="Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).">: bool option;
  ?external_urls <doc text="External URLs for this track.\n">: simplifiedTrackObjectExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_playable <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.\n">: bool option;
  ?linked_from <doc text="Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.">: simplifiedTrackObjectLinked_from option;
  ?restrictions <doc text="Included in the response when a content restriction is applied.\n">: simplifiedTrackObjectRestrictions option;
  ?name <doc text="The name of the track.">: string option;
  ?preview_url <doc text="A URL to a 30 second preview (MP3 format) of the track.\n">: string nullable option;
  ?track_number <doc text="The number of the track. If an album has several discs, the track number is the number on the specified disc.\n">: int option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?is_local <doc text="Whether or not the track is from a local file.\n">: bool option;
} 

type audioFeaturesObject = {
  ?acousticness <doc text="A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n">: float option;
  ?analysis_url <doc text="A URL to access the full audio analysis of this track. An access token is required to access this data.\n">: string option;
  ?danceability <doc text="Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n">: float option;
  ?duration_ms <doc text="The duration of the track in milliseconds.\n">: int option;
  ?energy <doc text="Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n">: float option;
  ?id <doc text="The Spotify ID for the track.\n">: string option;
  ?instrumentalness <doc text="Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n">: float option;
  ?key : key option;
  ?liveness <doc text="Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n">: float option;
  ?loudness : loudness option;
  ?mode : mode option;
  ?speechiness <doc text="Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n">: float option;
  ?tempo : tempo option;
  ?time_signature : timeSignature option;
  ?track_href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type.\n">: audioFeaturesObjectType option;
  ?uri <doc text="The Spotify URI for the track.\n">: string option;
  ?valence <doc text="A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n">: float option;
} 

type mode = int <doc text="Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n">

type key = int <doc text="The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C\226\153\175/D\226\153\173, 2 = D, and so on. If no key was detected, the value is -1.\n">

type loudness = float <doc text="The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.\n">

type tempo = float <doc text="The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n">

type timeSignature = int <doc text="An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".">

type segmentObject = {
  ?start <doc text="The starting point (in seconds) of the segment.">: float option;
  ?duration <doc text="The duration (in seconds) of the segment.">: float option;
  ?confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.\n">: float option;
  ?loudness_start <doc text="The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.">: float option;
  ?loudness_max <doc text="The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.">: float option;
  ?loudness_max_time <doc text="The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.">: float option;
  ?loudness_end <doc text="The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.">: float option;
  ?pitches <doc text="Pitch content is given by a \226\128\156chroma\226\128\157 vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).\n\nVectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.\nAs can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.\n![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)\n">: float list option;
  ?timbre <doc text="Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment\226\128\153s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.\n\nFor completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).\n![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)\n\nThe actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.\n">: float list option;
} 

type sectionObject = {
  ?start <doc text="The starting point (in seconds) of the section.">: float option;
  ?duration <doc text="The duration (in seconds) of the section.">: float option;
  ?confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".">: float option;
  ?loudness <doc text="The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.">: float option;
  ?tempo <doc text="The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.">: float option;
  ?tempo_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.">: float option;
  ?key <doc text="The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C\226\153\175/D\226\153\173, 2 = D, and so on). If no key was detected, the value is -1.">: int option;
  ?key_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.">: float option;
  ?mode <doc text="Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.">: sectionObjectMode option;
  ?mode_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `mode`.">: float option;
  ?time_signature : timeSignature option;
  ?time_signature_confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.">: float option;
} 

type timeIntervalObject = {
  ?start <doc text="The starting point (in seconds) of the time interval.">: float option;
  ?duration <doc text="The duration (in seconds) of the time interval.">: float option;
  ?confidence <doc text="The confidence, from 0.0 to 1.0, of the reliability of the interval.">: float option;
} 

type audioAnalysisObject = {
  ?meta : audioAnalysisObjectMeta option;
  ?track : audioAnalysisObjectTrack option;
  ?bars <doc text="The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.">: timeIntervalObject list option;
  ?beats <doc text="The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.">: timeIntervalObject list option;
  ?sections <doc text="Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.">: sectionObject list option;
  ?segments <doc text="Each segment contains a roughly conisistent sound throughout its duration.">: segmentObject list option;
  ?tatums <doc text="A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).">: timeIntervalObject list option;
} 

type publicUserObject = {
  ?display_name <doc text="The name displayed on the user's profile. `null` if not available.\n">: string nullable option;
  ?external_urls <doc text="Known public external URLs for this user.\n">: publicUserObjectExternal_urls option;
  ?followers <doc text="Information about the followers of this user.\n">: publicUserObjectFollowers option;
  ?href <doc text="A link to the Web API endpoint for this user.\n">: string option;
  ?id <doc text="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
  ?images <doc text="The user's profile image.\n">: imageObject list option;
  ?type_ <json name="type"> <doc text="The object type.\n">: publicUserObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.\n">: string option;
} 

type privateUserObject = {
  ?country <doc text="The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._\n">: string option;
  ?display_name <doc text="The name displayed on the user's profile. `null` if not available.\n">: string option;
  ?email <doc text="The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._\n">: string option;
  ?explicit_content <doc text="The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._\n">: privateUserObjectExplicit_content option;
  ?external_urls <doc text="Known external URLs for this user.">: privateUserObjectExternal_urls option;
  ?followers <doc text="Information about the followers of the user.">: privateUserObjectFollowers option;
  ?href <doc text="A link to the Web API endpoint for this user.\n">: string option;
  ?id <doc text="The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.\n">: string option;
  ?images <doc text="The user's profile image.">: imageObject list option;
  ?product <doc text="The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"user\"\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.\n">: string option;
} 

type errorObject = {
  status <doc text="The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).\n">: int;
  message <doc text="A short description of the cause of the error.\n">: string;
} 

type disallowsObject = {
  ?interrupting_playback <doc text="Interrupting playback. Optional field.">: bool option;
  ?pausing <doc text="Pausing. Optional field.">: bool option;
  ?resuming <doc text="Resuming. Optional field.">: bool option;
  ?seeking <doc text="Seeking playback location. Optional field.">: bool option;
  ?skipping_next <doc text="Skipping to the next context. Optional field.">: bool option;
  ?skipping_prev <doc text="Skipping to the previous context. Optional field.">: bool option;
  ?toggling_repeat_context <doc text="Toggling repeat context flag. Optional field.">: bool option;
  ?toggling_shuffle <doc text="Toggling shuffle flag. Optional field.">: bool option;
  ?toggling_repeat_track <doc text="Toggling repeat track flag. Optional field.">: bool option;
  ?transferring_playback <doc text="Transfering playback between devices. Optional field.">: bool option;
} 

type currentlyPlayingContextObject = {
  ?device <doc text="The device that is currently active.\n">: currentlyPlayingContextObjectDevice option;
  ?repeat_state <doc text="off, track, context">: string option;
  ?shuffle_state <doc text="If shuffle is on or off.">: bool option;
  ?context <doc text="A Context Object. Can be `null`.">: currentlyPlayingContextObjectContext option;
  ?timestamp <doc text="Unix Millisecond Timestamp when playback state was last changed (play, pause, skip, scrub, new song, etc.).">: int64 option;
  ?progress_ms <doc text="Progress into the currently playing track or episode. Can be `null`.">: int option;
  ?is_playing <doc text="If something is currently playing, return `true`.">: bool option;
  ?item <doc text="The currently playing track or episode. Can be `null`.">: currentlyPlayingContextObjectItem option;
  ?currently_playing_type <doc text="The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.\n">: string option;
  ?actions <doc text="Allows to update the user interface based on which playback actions are available within the current context.\n">: currentlyPlayingContextObjectActions option;
} 

type queueObject = {
  ?currently_playing <doc text="The currently playing track or episode. Can be `null`.">: queueObjectCurrently_playing option;
  ?queue <doc text="The tracks or episodes in the queue. Can be empty.">: queueObjectQueue list option;
} 

type playlistTrackObject = {
  ?added_at <doc text="The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._\n">: string option;
  ?added_by <doc text="The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._\n">: playlistTrackObjectAdded_by option;
  ?is_local <doc text="Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.\n">: bool option;
  ?track <doc text="Information about the track or episode.">: playlistTrackObjectTrack option;
} 

type playHistoryObject = {
  ?track <doc text="The track the user listened to.">: playHistoryObjectTrack option;
  ?played_at <doc text="The date and time the track was played.">: string option;
  ?context <doc text="The context the track was played from.">: playHistoryObjectContext option;
} 

type simplifiedArtistObject = {
  ?external_urls <doc text="Known external URLs for this artist.\n">: simplifiedArtistObjectExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the artist.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.\n">: string option;
  ?name <doc text="The name of the artist.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type.\n">: simplifiedArtistObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.\n">: string option;
} 

type artistObject = {
  ?external_urls <doc text="Known external URLs for this artist.\n">: artistObjectExternal_urls option;
  ?followers <doc text="Information about the followers of the artist.\n">: artistObjectFollowers option;
  ?genres <doc text="A list of the genres the artist is associated with. If not yet classified, the array is empty.\n">: string list option;
  ?href <doc text="A link to the Web API endpoint providing full details of the artist.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.\n">: string option;
  ?images <doc text="Images of the artist in various sizes, widest first.\n">: imageObject list option;
  ?name <doc text="The name of the artist.\n">: string option;
  ?popularity <doc text="The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.\n">: int option;
  ?type_ <json name="type"> <doc text="The object type.\n">: artistObjectType option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.\n">: string option;
} 

type chapterRestrictionObject = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n- `payment_required` - Payment is required to play the content item.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} 

type episodeRestrictionObject = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} 

type albumRestrictionObject = {
  ?reason <doc text="The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\nAdditional reasons may be added in the future.\n">: albumRestrictionObjectReason option;
} 

type trackRestrictionObject = {
  ?reason <doc text="The reason for the restriction. Supported values:\n- `market` - The content item is not available in the given market.\n- `product` - The content item is not available for the user's subscription type.\n- `explicit` - The content item is explicit and the user's account is set to not play explicit content.\n\nAdditional reasons may be added in the future.\n**Note**: If you use this field, make sure that your application safely handles unknown values.\n">: string option;
} 

type linkedTrackObject = {
  ?external_urls <doc text="Known external URLs for this track.\n">: linkedTrackObjectExternal_urls option;
  ?href <doc text="A link to the Web API endpoint providing full details of the track.\n">: string option;
  ?id <doc text="The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
  ?type_ <json name="type"> <doc text="The object type: \"track\".\n">: string option;
  ?uri <doc text="The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.\n">: string option;
} 
