@document.meta
title: 07
description: 
authors: r17
categories: [
  1on1
  skills
  monorepo
  nix
  javascript
]
created: 2024-07-07T18:41:18+0700
updated: 2024-08-15T01:21:54+0700
version: 1.1.1
@end

* 1:1
** Luthfi Yufajjiru - {https://x.com/luthfiyufajjiru}[@luthfiyufajjiru]
   - How to find jobs and perform in interviews 
     See this courses to perform well in interviews - {https://www.jobsearch.dev/#nav-ramp-up}[Job Search Ramp Up]

   - How to be a good *"senior"* developer
     Nothing best best answer but for senior is required {https://en.wikipedia.org/wiki/First_principle#:~:text=%22First%20principles%20thinking%22%20consists%20of,not%20violate%20any%20fundamental%20laws.}[First Principles Thinking]. The first principle is that a person should have a sense of "problem solving" and "creativity". The second principle is that a person should have a sense of "curiosity" and "passion". The third principle is that a person should have a sense of "humility" and "empathy". When all the principle is expressed, the person should be able to achieve the best of themselves. Someone maybe answer with "Strong Fundamental in Technical" but it's not enough for "How you know the fundamentally that you needed".

*** To be a good "senior" developer, there isn't a single best answer
    To be a good "senior" developer, there isn't a single best answer, but one effective approach is grounded in First Principles Thinking. This involves *breaking down complex problems* into their most basic elements and *building* up from there. Here are three key principles for *senior developers* based on this approach:

    - *Problem Solving and Creativity*: The first principle is having a strong sense of problem-solving and creativity. This means not just finding solutions but innovating and thinking outside the box. A senior developer should approach problems with an analytical mindset, breaking them down into fundamental parts and reassembling them in new and effective ways.

    - *Curiosity and Passion*: The second principle is maintaining a sense of curiosity and passion. A good senior developer is always eager to learn and stay updated with the latest trends and technologies. This drive for knowledge not only keeps their skills sharp but also fuels their enthusiasm for tackling new challenges and exploring novel solutions.

    - *Humility and Empathy*: The third principle is demonstrating humility and empathy. A senior developer must recognize the value of others' contributions, be open to feedback, and understand the perspectives of both their colleagues and end-users. This helps in building better teamwork, fostering a collaborative environment, and creating solutions that truly meet users' needs.

    While *technical fundamentals* are crucial, they are not sufficient alone. Understanding what technical knowledge is essential and continuously building upon it requires the application of these principles. A senior developer who embodies *problem-solving, creativity, curiosity, passion, humility, and empathy* will be well-equipped to achieve the best version of themselves and lead their team to *success*.

** Luthfi Sukma - {https://twitter.com/}[@unknown]
*** Background
    
*** Different between `nx` and `turborepo` ?
    - `turborepo` aka {https://turbo.build/}[turbo.build] - Turbo is an incremental bundler and build system optimized for JavaScript and TypeScript, written in Rust.

    - {https://nx.dev/}[nx.dev] - Nx is a build system with built-in tooling and advanced CI capabilities . It helps you maintain and scale monorepos, both locally and on CI.

    - `package manager` and `monorepo tooling` are two different things.
      @code
      .nx 
      |-package.json
      |-- nx.json
      |-- apps/
      |   |-- app1/
              |-- project.json
      |   |-- app2/
              |-- project.json

      .turborepo
      |-- package.json
      |-- turbo.json
      |-- apps/
      |   |-- app1/
            |-- package.json
      |   |-- app2/
            |-- package.json
      @end

*** Advantages and Disadvantages of nx and turborepo? What are nx and turborepo intended for?
    - Nx
      - Advantages
      - Disadvantages
        - Learning curve

    - Turborepo
      - Advantages
        - Flexibility
      - Disadvantages

*** If `monorepo`, is it possible if we do deployment in different instances for each application?
*** Can I share UI components if I use `CRA` for the admin panel and `Next.js` for the front page?
*** What should we consider for scaling when using a monorepo codebase?
    - Documentation: Maintain good documentation to help navigate the large codebase. - Documentation
    - Dependency Management: Ensure clear and strict dependencies between modules. - Workspaces
    - Modularization: Break the code into smaller, reusable modules. - Libraries & Applications (Libraries are reusable, Applications are not)
    - Build Optimization: Use tools like `Turborepo` or `Nx` to manage and optimize builds. - Build and Tasks Management (CI Related)
    - CI/CD Pipelines: Set up efficient continuous integration and deployment pipelines.
    - Code Ownership: Define clear ownership and maintainers for different parts of the codebase. - Organization Management
    - Testing: Implement comprehensive testing strategies to catch issues early. - Testing
