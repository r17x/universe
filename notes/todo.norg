@document.meta
title: Todo
description: make things get fucking done
authors: r17
categories: 
created: 2024-05-26T02:31:16+0700
updated: 2024-08-10T00:50:01+0700
version: 1.1.1
@end

* Tasks
  How to write a task in norg
  @code norg
  - (x) done 
  - ( ) undone
  - (-) pending
  - (=) on hold
  - (_) cancelled
  - (!) important
  - (+) recurring
  - (?) uncertain
  @end

** Blog - Rin.rocks

*** Todo
    - ( ) Fully OCaml/ReasonML with {https://melange.re}[melange.re]
    - (?) Transform from *.norg* to *React Component*
    - (?) tree-sitter in *React*
    - ( ) implement norg parser in OCaml see {*** OCaml PPX with Norg}[#ocaml-ppx-with-norg]
    -- ( ) `Norg.Token.t` to `Norg.AST.t`
    -- ( ) `Norg.Parser`
    -- ( ) Codegen for `Norg.AST.t`
    --- ( ) `Norg.AST.t` to OCaml/ReasonML
    --- ( ) `Norg.AST.t` to Markdown

*** OCaml PPX with Norg
    I have an idea how to use Norg in OCaml ecosystem, especially with ReasonML and ReasonReact.
    
    Imagine you have a norg document 
    @code norg
    @document.meta
    title: hello world ppx, norg, and reason-react
    description: make things get fucking done
    authors: r17
    categories: [blog]
    created: 2024-05-26T02:31:16+0700
    updated: 2024-07-29T20:00:28+0700
    version: 1.1.1
    @end

    * Hello
    
    ** World
    @end

    and write a ReasonML code like this:

    @code ocaml
    [@norg.react "notes/hello-world.norg"]
    @end

    And you will be able to transform the content of `hello-world.norg` to be Reason React Component, like this:

    @code ocaml
    [@react.component]
    let make = () => {
      <html>
        <head>
            <title> {React.string("hello world ppx, norg, and reason-react")} </title>
            <meta name="description" content="make things get fucking done" />
            <meta name="author" content="r17" />
            <meta name="category" content="blog" />
        </head>
        <body>
          <h1> {React.string("Hello")} </h1>
          <h2> {React.string("World")} </h2>
        </body>
      </html>
    }
    @end

** Dotfiles
   - ( ) integration with {https://github.com/Misterio77/nix-colors}[nix-colors]
   - (-) move {https://github.com/r17x/rin.rocks}[rin.rocks] to {https://github.com/r17x/nixpkgs}[nixpkgs]
   - (x) use *flake-parts* in {https://github.com/r17x/nixpkgs}[nixpkgs]
   - (x) move {https://github.com/r17x/nvim.nix}[nvim.nix] to {https://github.com/r17x/nixpkgs}[nixpkgs]
   - (x) use {https://github.com/3rd/image.nvim}[image.nvim] in `nvim.nix` with {https://nix-community.github.io/nixvim/plugins/image/index.html}[plugins.image] . 
         see implementation in {/ ../nvim.nix/config/ui.nix:13}[config/ui.nix] and updated configuration of {/ ../home/tmux.nix:25}[home/tmux.nix]
   - (x) Rename this repository from {https://github.com/r17x/nixpkgs}[nixpkgs] to {https://github.com/r17x/universe}[`universe`]
   - (x) Move all modules to {/ ../nix/}[nix/] directory
   - (x) Integration with `tmux-thumbs`  
   - (x) reborn `mouseless.enable = true;` in {/ ../nix/nixosModules/darwin/mouseless.nix}[mouseless.nix]
   -- (x) {/ ../nix/nixosModules/darwin/mouseless.nix:66}[skhd]
   -- (x) {/ ../nix/nixosModules/darwin/mouseless.nix:15}[yabai]
   -- (x) {/ ../nix/nixosModules/darwin/sketchybarrc.nix}[sketchybar]
   -- (x) sketchybar custom 

** Neovim
   - (x) Neovim
   -- (x) Find why image cannot render correctly in `iTerm`
   -- (x) Revisit `cmp` in current nixvim. revisit `autoEnabledSources`.
   -- (x) Add `tree-sitter-rescript` for syntax highlighting.
          with {/ ../nix/overlays/default.nix:6}[modules/overlays/default.nix] and integration {/ ../nvim.nix/config/ui.nix:419}[nixvim]
   - (x) lsp {/ ../nvim.nix/config/lsp.nix:30}[rescriptls] integration
   - (x) reconfigure coloscheme in {/ ../nvim.nix/config/ui.nix:72}[edge]
   -- (x) {/ ../nvim.nix/config/ui.nix:3}[link highlight] to `@neorg.tags.ranged_verbatim.code_block` to `fg`
   -- ( ) Keymap and Toggle function for colorscheme:edge `edge_*`
   - (x) Neorg {/ ../nvim.nix/config/writing.nix:15}[integration] with Telescope
   -- ( ) Keymap for Neorg x Telescope
   - (x) integration with {/ ../nvim.nix/config/navigations.nix:50}[hop.nvim]

** Homelab Evilfactory
   - ( ) Network
   -- ( ) Buy RJ45 cable ~20 meters
   -- ( ) Build Rack for all devices stand 
  
** Uncertain
   - ( ) Analytics
   -- ( ) {https://signoz.io/docs/introduction/}[signoz] for observability
   -- ( ) {https://posthog.com/}[PostHog] for analytics

   - ( ) Created ISO (image) for Raspiberry phi 4 based on {https://github.com/nix-community/nixos-generators}[nixos-generators].
   -- ( ) {https://mtlynch.io/nixos-pi4/}[Installing NixOS on Raspberry Pi 4]
   -- ( ) {https://pablo.tools/blog/computers/nixos-generate-raspberry-images/}[GENERATING RASPBERRY PI IMAGES WITH NIXOS]
   -- ( ) Deploy {https://cache.komunix.org}[komunix.org]
   -- ( ) {https://discourse.nixos.org/t/introducing-attic-a-self-hostable-nix-binary-cache-server/24343}[Attic: self-hosted Nix Cache]
   --- Reading {https://www.channable.com/tech/setting-up-a-private-nix-cache-for-fun-and-profit}[Setting up a private Nix Cache for fun and profit]
